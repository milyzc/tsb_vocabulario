package presentacion;

import java.awt.HeadlessException;
import java.io.File;
import java.util.Iterator;
import javax.swing.JFileChooser;

import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

import logica.controladores.*;
import logica.entidades.*;
import logica.util.*;

import ConexionBD.BasePalabra;
import java.awt.Color;

/**
 *
 * @author Tyncho
 * @version 1.0
 */
public class Inicio extends javax.swing.JFrame {

    private final Lector lector;

    /**
     * Creates new form Principal
     *
     * @param controlador
     */
    public Inicio(Lector controlador) {
        initComponents();
        this.setMaximizedBounds(this.getBounds());
        configurarSeleccionadorArchivos();

        lector = controlador;
        tblVocabulario.setEnabled(true);
        tblArchivosAProcesar.setEnabled(false);
        btnDetallePalabra.setEnabled(false);

        mostrarPalabras(BasePalabra.obtenerTodasPalabras());
        this.setBackground(Color.CYAN);
//        habilitarProcesamiento();
    }

    /**
     * Actualiza la tabla de archivos para ser procesados según la cola de
     * archivos que se pasa como parametro. Y setea la bandera NUEVOS_ARCHIVOS
     * en false, de esta forma indica que no hay más archivos para mostrar
     *
     * @param colaArchivos
     */
    public void mostrarArchivosAProcesar(SimpleList<Archivo> colaArchivos) {
        DefaultTableModel dtm = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        dtm.setColumnIdentifiers(new String[]{"Nombre", "Ruta"});
        Iterator<Archivo> it = colaArchivos.iterator();
        Archivo archivo = null;
        while (it.hasNext()) {
            archivo = it.next();
            dtm.addRow(new Object[]{archivo.getNombre(), archivo.getRuta()});
        }
        tblArchivosAProcesar.setModel(dtm);
    }

    /**
     * Muestra las palabras y su frecuencia total (cantidad de apariciones en
     * todos los archivos) enviadas por parametro en la tabla
     *
     * @param palabras
     */
    public void mostrarPalabras(SimpleList<Palabra> palabras) {
        if (palabras != null) {
            DefaultTableModel dtm = new DefaultTableModel() {

                @Override
                public boolean isCellEditable(int row, int column) {
                    return false;
                }

            };
            dtm.setColumnIdentifiers(new String[]{"Palabra", "Frecuencia"});
            Iterator<Palabra> it = palabras.iterator();
            Palabra palabra = null;
            while (it.hasNext()) {
                palabra = it.next();
                dtm.addRow(new Object[]{palabra.getDescripcion(), palabra.getCantidad()});
            }
            tblVocabulario.setModel(dtm);
        }
    }

    /**
     * configura la extensión de arvhivos que se visualizan en el selecionador
     * de archivos (file chooser).
     */
    private void configurarSeleccionadorArchivos() {
        FileFilter ff = new FileNameExtensionFilter("txt", "TXT");
        fcSeleccionadorArchivos.setFileFilter(ff);
        fcSeleccionadorArchivos.setMultiSelectionEnabled(true);
        ocutarSeleccionadorArchivos();
    }

    /**
     * Esconde el Selecionador de archivos (FileChooser).
     */
    private void ocutarSeleccionadorArchivos() {
        fcSeleccionadorArchivos.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblVocabulario = new javax.swing.JTable();
        lblBuscar = new java.awt.Label();
        txtBuscar = new java.awt.TextField();
        fcSeleccionadorArchivos = new javax.swing.JFileChooser();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblArchivosAProcesar = new javax.swing.JTable();
        btnDetallePalabra = new javax.swing.JButton();
        btnSeleccionarArchivos = new javax.swing.JButton();
        btnProcesar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("TSB Vocabulario");
        setName("jfPrincipal"); // NOI18N

        tblVocabulario.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Palabra", "Frecuencia"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblVocabulario.setEditingRow(0);
        tblVocabulario.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblVocabularioMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblVocabulario);

        lblBuscar.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        lblBuscar.setText("Buscador: ");

        txtBuscar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtBuscarKeyReleased(evt);
            }
        });

        fcSeleccionadorArchivos.setAcceptAllFileFilterUsed(false);
        fcSeleccionadorArchivos.setCurrentDirectory(new java.io.File("C:\\Users\\Emiliano\\Desktop\\TSB - TPI - Repositorio\\tsb_vocabulario\\res"));

        tblArchivosAProcesar.setAutoCreateRowSorter(true);
        tblArchivosAProcesar.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre", "Ruta"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblArchivosAProcesar.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(tblArchivosAProcesar);

        btnDetallePalabra.setText("Ver Detalle de Palabra");
        btnDetallePalabra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDetallePalabraActionPerformed(evt);
            }
        });

        btnSeleccionarArchivos.setText("Seleccionar Archivos");
        btnSeleccionarArchivos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSeleccionarArchivosActionPerformed(evt);
            }
        });

        btnProcesar.setText("Procesar");
        btnProcesar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProcesarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 706, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(72, 72, 72)
                        .addComponent(lblBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(25, 25, 25)
                        .addComponent(txtBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(235, 235, 235)
                        .addComponent(btnDetallePalabra)))
                .addGap(64, 64, 64)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnSeleccionarArchivos)
                        .addGap(53, 53, 53)
                        .addComponent(btnProcesar, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(fcSeleccionadorArchivos, javax.swing.GroupLayout.PREFERRED_SIZE, 9, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 351, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(31, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(fcSeleccionadorArchivos, javax.swing.GroupLayout.PREFERRED_SIZE, 35, Short.MAX_VALUE)
                        .addGap(35, 35, 35))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(btnDetallePalabra)
                                .addComponent(btnSeleccionarArchivos)
                                .addComponent(btnProcesar))
                            .addComponent(txtBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 372, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Permite seleccionar archivos
     */
    public void seleccionarArchivos() {
        fcSeleccionadorArchivos.setVisible(true);
        try {
            int option = fcSeleccionadorArchivos.showOpenDialog(this);
            switch (option) {
                case JFileChooser.APPROVE_OPTION:
                    for (File file : fcSeleccionadorArchivos.getSelectedFiles()) {
                        lector.agregar_archivo(new Archivo(file));
                    }
                    ocutarSeleccionadorArchivos();
                    this.mostrarArchivosAProcesar(lector.getColaArchivos());
                    break;
                case JFileChooser.CANCEL_OPTION:
                    ocutarSeleccionadorArchivos();
                    break;
                case JFileChooser.ERROR_OPTION:
                    System.out.println(this.getState());
                    ocutarSeleccionadorArchivos();
                    break;
                default:
                    break;
            }
        } catch (HeadlessException e) {
            e.printStackTrace();
        }
    }

//    private void habilitarProcesamiento() {
//        if (lector.hay_archivos()) {
//            btnProcesar.setEnabled(true);
//        } else {
//            btnProcesar.setEnabled(false);
//        }
//
//    }
    /**
     * Limpia la grilla de archivos procesador.
     */
    public void limpiarArchivosSeleccionados() {
        DefaultTableModel dtm = new DefaultTableModel();
        dtm.setColumnIdentifiers(new String[]{"Nombre", "Ruta"});
        this.tblArchivosAProcesar.setModel(dtm);
    }

    /**
     *
     * @param evt
     */
    private void tblVocabularioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblVocabularioMouseClicked
        if (evt.getClickCount() == 1) {
            if (tblVocabulario.getSelectedRow() != -1) {
                btnDetallePalabra.setEnabled(true);
            }
        }
    }//GEN-LAST:event_tblVocabularioMouseClicked

    private void btnDetallePalabraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDetallePalabraActionPerformed
        int fila = tblVocabulario.getSelectedRow();
        if (fila >= 0) {
            try {
                Palabra p = new Palabra(tblVocabulario.getModel().getValueAt(fila, 0).toString());
                p.setCantidad((int) tblVocabulario.getModel().getValueAt(fila, 1));
                DetallePalabra dp = new DetallePalabra(p, BasePalabra.obtenerArchivosPorPalabra(p.getDescripcion()));
                dp.setVisible(true);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        System.out.println(fila + " <- fila ");
    }//GEN-LAST:event_btnDetallePalabraActionPerformed

    private void txtBuscarKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBuscarKeyReleased
        mostrarPalabras(BasePalabra.buscarPalabras(txtBuscar.getText().trim()));
    }//GEN-LAST:event_txtBuscarKeyReleased

    private void btnSeleccionarArchivosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSeleccionarArchivosActionPerformed
        this.seleccionarArchivos();
    }//GEN-LAST:event_btnSeleccionarArchivosActionPerformed

    private void btnProcesarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProcesarActionPerformed
       //si hay archivos seleccionados proceso.
        if(lector.getColaArchivos().size()!=0)
       {(new ProgressBarInt(lector)).setVisible(true);
        dispose();}
        
    }//GEN-LAST:event_btnProcesarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDetallePalabra;
    private javax.swing.JButton btnProcesar;
    private javax.swing.JButton btnSeleccionarArchivos;
    private javax.swing.JFileChooser fcSeleccionadorArchivos;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private java.awt.Label lblBuscar;
    private javax.swing.JTable tblArchivosAProcesar;
    private javax.swing.JTable tblVocabulario;
    private java.awt.TextField txtBuscar;
    // End of variables declaration//GEN-END:variables

}
